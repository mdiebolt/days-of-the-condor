<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2012-12-16T00:00:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>CoffeeScript static analysis</title>
    <link href="/2012/12/16/coffeescript-static-analysis.html" rel="alternate"/>
    <id>/2012/12/16/coffeescript-static-analysis.html</id>
    <published>2012-12-16T00:00:00Z</published>
    <updated>2012-12-16T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;For a while I&amp;#39;ve been looking for code quality tools to analyze CoffeeScript. I haven&amp;#39;t found anything very promising. So as part of a recent push to become more comfortable with Bash scripting, I decided I&amp;#39;d cut some corners and do it myself.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a utility function I wrote to help me color text. It colors output yellow when it&amp;#39;s within a warning range, and red when it exceeds a critical range.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;For a while I&amp;#39;ve been looking for code quality tools to analyze CoffeeScript. I haven&amp;#39;t found anything very promising. So as part of a recent push to become more comfortable with Bash scripting, I decided I&amp;#39;d cut some corners and do it myself.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a utility function I wrote to help me color text. It colors output yellow when it&amp;#39;s within a warning range, and red when it exceeds a critical range.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env sh&lt;/span&gt;

&lt;span class="c"&gt;# set the output color based on conditions&lt;/span&gt;
set_output_color&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;medium_threshold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;high_threshold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$3&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$value&amp;quot;&lt;/span&gt; -gt &lt;span class="s2"&gt;&amp;quot;$high_threshold&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -en &lt;span class="nv"&gt;$red&lt;/span&gt;
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$value&amp;quot;&lt;/span&gt; -gt &lt;span class="s2"&gt;&amp;quot;$medium_threshold&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -en &lt;span class="nv"&gt;$yellow&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -en &lt;span class="nv"&gt;$reset&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I mentioned in my previous post about &lt;a href="/2012/12/10/clean-bash-profiles.html"&gt;clean bash profiles&lt;/a&gt;, I export the most common colors as variable so that I don&amp;#39;t need to remember Bash escape sequences. &lt;/p&gt;

&lt;p&gt;In this function I use those color variables to set the output color based on two parameters, &lt;code&gt;medium_threshold&lt;/code&gt; and &lt;code&gt;high_threshold&lt;/code&gt;, which are passed into the function as positional parameters, making sure to reset the color if the value doesn&amp;#39;t fall within the threshold range.&lt;/p&gt;

&lt;p&gt;Building on &lt;code&gt;set_output_color&lt;/code&gt;, I put together a short function to count the lines of code in each file below the current directory.&lt;/p&gt;

&lt;h4&gt;Metric: Lines of code&lt;/h4&gt;

&lt;p&gt;Lines of code is perhaps the most basic metric. As your code evolves it&amp;#39;s easy to keep implementing feature after feature in the same file, glossing over the fact that a class or module is too long and should be split into another file for ease of reading and code clarity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env sh&lt;/span&gt;

&lt;span class="c"&gt;# count lines of code in each file in the current directory&lt;/span&gt;
&lt;span class="c"&gt;# report back long files&lt;/span&gt;
loc&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;high&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;200
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;medium&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;150

  &lt;span class="k"&gt;for &lt;/span&gt;file in &lt;span class="sb"&gt;`&lt;/span&gt;find . -type f&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$file&lt;/span&gt; | wc -l&lt;span class="sb"&gt;`&lt;/span&gt;

    &lt;span class="c"&gt;# set output color based&lt;/span&gt;
    &lt;span class="c"&gt;# on thresholds passed in&lt;/span&gt;
    set_output_color &lt;span class="nv"&gt;$count&lt;/span&gt; &lt;span class="nv"&gt;$medium&lt;/span&gt; &lt;span class="nv"&gt;$high&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This returns a nice colored output, highlighting files longer than 150 lines in yellow, and files longer than 200 lines in red. The thresholds chosen are based on personal preference.&lt;/p&gt;

&lt;h4&gt;Metric: Cyclomatic complexity&lt;/h4&gt;

&lt;p&gt;This metric is a bit more tricky to calculate, but essentially boils down to the number of paths that exist through the code. A file with high complexity often includes messy conditional logic and is a good place to start refactoring.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env sh&lt;/span&gt;

&lt;span class="c"&gt;# approximate cyclomatic complexity of files&lt;/span&gt;
&lt;span class="c"&gt;# under the current directory&lt;/span&gt;
complexity&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;file
  &lt;span class="nb"&gt;local &lt;/span&gt;count

  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;high&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;15
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;medium&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10

  &lt;span class="c"&gt;# look through all files in and&lt;/span&gt;
  &lt;span class="c"&gt;# below this directory recursively&lt;/span&gt;
  &lt;span class="k"&gt;for &lt;/span&gt;file in &lt;span class="sb"&gt;`&lt;/span&gt;find . -type f&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c"&gt;# count the number of&lt;/span&gt;
    &lt;span class="c"&gt;# if statements plus one&lt;/span&gt;
    &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="nv"&gt;$file&lt;/span&gt; | grep &lt;span class="s1"&gt;&amp;#39;if &amp;#39;&lt;/span&gt; | wc -l&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;

    set_output_color &lt;span class="nv"&gt;$count&lt;/span&gt; &lt;span class="nv"&gt;$medium&lt;/span&gt; &lt;span class="nv"&gt;$high&lt;/span&gt;

    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;basename &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="nv"&gt;$count&lt;/span&gt; &lt;span class="nv"&gt;$line_output&lt;/span&gt;
  &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although this is a very crude approximation of cyclomatic complexity, I&amp;#39;ve found it to be useful in pointing out files that could use refactoring. &lt;/p&gt;

&lt;p&gt;The function is very simple. It iterates over all files below the current directory and counts the number of lines containing an &lt;code&gt;if&lt;/code&gt; statement, then adds one to that number, since there is always one path through your code before any conditionals are added. A more complete and accurate tool would add weight to nested &lt;code&gt;if&lt;/code&gt; statements and would include iterators / for loops in the count.&lt;/p&gt;

&lt;p&gt;The thresholds were chosen based on complexity values discussed in the &lt;a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;wikipedia article about cyclomatic complexity&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Metric: Lines of code per method&lt;/h4&gt;

&lt;p&gt;Long methods are hard to follow and should almost always be broken up into smaller methods with clear names that describe what they do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contains_function?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/-&amp;gt;|=&amp;gt;/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# TODO this doesn&amp;#39;t catch functions created like this&lt;/span&gt;
&lt;span class="c1"&gt;# someFn = =&amp;gt; &amp;quot;blah&amp;quot; or someFn = (arg) =&amp;gt; &amp;#39;blah&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip!&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;function_start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;method_length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; lines - &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function_line_count&lt;/span&gt;
  &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;

  &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
  &lt;span class="n"&gt;function_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="c1"&gt;# TODO nested functions will break this&lt;/span&gt;
  &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gets&lt;/span&gt;
      &lt;span class="c1"&gt;# if there is a function declaration on this line&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;contains_function?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# if we&amp;#39;ve found a new function then report on the last one&lt;/span&gt;
        &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;

        &lt;span class="c1"&gt;# set where this functions starts and its name&lt;/span&gt;
        &lt;span class="n"&gt;function_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineno&lt;/span&gt;
        &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# add 2 because the blank line at the end of the file&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineno&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# execute the function if we are&lt;/span&gt;
&lt;span class="c1"&gt;# executing the file by itself&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;__FILE__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vg"&gt;$0&lt;/span&gt;
  &lt;span class="n"&gt;function_line_count&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This last script is written in Ruby because I couldn&amp;#39;t figure out a good way to write it in Bash. It counts the number of lines in each method. This is also the script that cheats the most, relying on a rigid structure to be accurate.&lt;/p&gt;

&lt;p&gt;It assumes you&amp;#39;re working with a Backbone class in CoffeeScript, and detects methods based on the presence of &lt;code&gt;-&amp;gt;&lt;/code&gt; or &lt;code&gt;=&amp;gt;&lt;/code&gt;. After finding one of these identifiers, it stores the name of the function, determining that based on where it finds the &lt;code&gt;:&lt;/code&gt; character (again, cheating by assuming an object literal style function declaration). Eg.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;method1: &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nv"&gt;method2: &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;@another&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once a function is found, the line number where it starts is stored. The script keeps going through the file until a new function is found. When this happens, the current line number is used against the start line of the previous function to determine the line count. A formatted description of the method is displayed on STDOUT.&lt;/p&gt;

&lt;h4&gt;What&amp;#39;s next?&lt;/h4&gt;

&lt;p&gt;My plans for the future are to incorporate this complexity suite into a CI workflow, failing the build if code complexity reaches a certain point. I&amp;#39;ll probably want to modify it to exclude third party code. &lt;/p&gt;

&lt;p&gt;Although this test suite is by no means rigorous in a computer science sense, it provides good insight into the quality of my code with minimal effort spent to develop it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Clean bash profiles</title>
    <link href="/2012/12/10/clean-bash-profiles.html" rel="alternate"/>
    <id>/2012/12/10/clean-bash-profiles.html</id>
    <published>2012-12-10T00:00:00Z</published>
    <updated>2012-12-10T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;Lately I&amp;#39;ve been more interested in writing Bash. However, as cool as Bash is for being able to pipe data all over the place, it has a really hard to read syntax. This makes understanding people&amp;#39;s 1000 line long Bash file tedious.&lt;/p&gt;

&lt;p&gt;The more utility functions, aliases, and slight tweaks I add to my profile, the longer I have to spend each time I come back to it. I recently split out each of the sections into their own files to fix this.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;Lately I&amp;#39;ve been more interested in writing Bash. However, as cool as Bash is for being able to pipe data all over the place, it has a really hard to read syntax. This makes understanding people&amp;#39;s 1000 line long Bash file tedious.&lt;/p&gt;

&lt;p&gt;The more utility functions, aliases, and slight tweaks I add to my profile, the longer I have to spend each time I come back to it. I recently split out each of the sections into their own files to fix this.&lt;/p&gt;

&lt;p&gt;My new profile is much shorter and is very clear.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# export common color escape sequences&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/Dropbox/dotfiles/colors

&lt;span class="c"&gt;# source utility functions&lt;/span&gt;
&lt;span class="k"&gt;for function &lt;/span&gt;in &lt;span class="sb"&gt;`&lt;/span&gt;find ~/Dropbox/dotfiles/bin/sh -type f&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$function&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;span class="c"&gt;# aliases&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/Dropbox/dotfiles/aliases

&lt;span class="c"&gt;# z script&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/z/z.sh

&lt;span class="c"&gt;# system PATH&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/Dropbox/dotfiles/paths

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;EDITOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;subl

&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$(rbenv init -)&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;computer_symbol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&#9889;&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;symbol_formatting&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$reset\n$computer_symbol &amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n\[\`if [[ \$? = &amp;quot;&lt;/span&gt;0&lt;span class="s2"&gt;&amp;quot; ]]; then echo &amp;#39;\e[32m\h\e[0m&amp;#39;; else echo &amp;#39;\e[31m\h\e[0m&amp;#39; ; fi\`\]:\w$yellow&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;`__git_ps1`&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$symbol_formatting&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can never remember the color escape sequences, so the first thing I do is &lt;code&gt;source&lt;/code&gt; a file that exports common colors for easy use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;red&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033[31m&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033[33m&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;green&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033[32m&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033[34m&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;purple&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033[35m&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;cyan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033[36m&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\033[0m&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, I make sure that I have access to all the utility functions I&amp;#39;ve been writing by sourcing each of them from a scripts directory.&lt;/p&gt;

&lt;p&gt;I noticed that my aliases were getting a bit out of hand and were taking up a large part of my profile, so I pulled them into a file too.&lt;/p&gt;

&lt;p&gt;This next one is really useful. &lt;a href="https://github.com/rupa/z"&gt;z script&lt;/a&gt; is a Bash utility that Paul Irish mentioned in a talk. It allows you to &lt;code&gt;cd&lt;/code&gt; into a directory by fuzzy matching directories in your recent bash history. For example, if you always &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;~/matt/some/really/long/project/called/rainbow-unicorns&lt;/code&gt;, you could type &lt;code&gt;z uni&lt;/code&gt; and z script would work its magic and take you there.&lt;/p&gt;

&lt;p&gt;The next part is a matter of personal taste. I prefer using vertical space to horizontal, so I split my &lt;code&gt;PATH&lt;/code&gt; variable assignment into another file. The old one used to have a bunch of junk all in one line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path1:/path2:/more/paths: &lt;span class="c"&gt;# etc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are how my paths look now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;path_directories&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/usr/local/share/npm/bin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;~/.pollev/bin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;~/bin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/bin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/sbin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/usr/local/bin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/usr/bin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/usr/local/sbin/:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/usr/sbin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/opt/local/sbin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/usr/local/git/bin:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/Applications/MacVim/:&amp;#39;&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;/Users/matt/.redis26/bin:&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${path_directories[@]}&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;PATH
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More verbose? Yes, but I&amp;#39;ll take it for clarity.&lt;/p&gt;

&lt;p&gt;The rest isn&amp;#39;t too exciting, I assign my &lt;code&gt;EDITOR&lt;/code&gt; of choice, configure rbenv, and then work black magic to make my prompt look the way I like.&lt;/p&gt;

&lt;p&gt;Overall, splitting my profile into multiple files has been a useful project in learning Bash tricks. The only thing I&amp;#39;m not pleased with is how hard it is to understand the &lt;code&gt;PS1&lt;/code&gt; code. I&amp;#39;d like to pull that logic into a function to clear up the intent of the code but I haven&amp;#39;t quite figured out how yet.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Programmatically focus content inside an iFrame</title>
    <link href="/2011/10/05/Programmatically focus content inside an iFrame.html" rel="alternate"/>
    <id>/2011/10/05/Programmatically focus content inside an iFrame.html</id>
    <published>2011-10-05T00:00:00Z</published>
    <updated>2011-10-05T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;This is a short one. On the Pixie landing page I was trying to use jQuery to focus on a game embedded via an iFrame. I tried&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;iframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;canvas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but that didn&#8217;t work.&lt;/p&gt;

&lt;p&gt;It turns out to get this working you need setTimeout. I guess the browser isn&#8217;t done loading the iFrame contents by the time jQuery says the DOM is ready.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;This is a short one. On the Pixie landing page I was trying to use jQuery to focus on a game embedded via an iFrame. I tried&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;iframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;canvas&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but that didn&#8217;t work.&lt;/p&gt;

&lt;p&gt;It turns out to get this working you need setTimeout. I guess the browser isn&#8217;t done loading the iFrame contents by the time jQuery says the DOM is ready.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;iframe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;contentWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&#8217;s the related &lt;a href="http://stackoverflow.com/questions/369026/setting-focus-to-iframe-contents" target='_blank'&gt;Stack Overflow question&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>jQuery UI Draggable stop drag programmatically</title>
    <link href="/2011/09/20/jQuery-UI-Draggable-stop-drag-programmatically.html" rel="alternate"/>
    <id>/2011/09/20/jQuery-UI-Draggable-stop-drag-programmatically.html</id>
    <published>2011-09-20T00:00:00Z</published>
    <updated>2011-09-20T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I hate making elements on web pages draggable. I think it&#8217;s a gross UI choice. However, sometimes it makes sense.&lt;/p&gt;

&lt;p&gt;Recently, I&#8217;ve been working on making a bunch of interactive tooltips to help people get familiar with our game development tools on Pixie. It&#8217;s pretty convenient for the user to move these things around in order to see different parts of the code as they read the tips.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I hate making elements on web pages draggable. I think it&#8217;s a gross UI choice. However, sometimes it makes sense.&lt;/p&gt;

&lt;p&gt;Recently, I&#8217;ve been working on making a bunch of interactive tooltips to help people get familiar with our game development tools on Pixie. It&#8217;s pretty convenient for the user to move these things around in order to see different parts of the code as they read the tips.&lt;/p&gt;

&lt;p&gt;On some of these tooltips I have code samples, which should be selectable so that people can copy the snippets into their game. I ran into a problem using jQuery UI draggable. The code snippet is a child of the draggable tooltip div so trying to select this code would drag the whole tooltip around.&lt;/p&gt;

&lt;p&gt;After some googling I came across the good solution, after finding many bad ones, like &#8220;try &lt;code&gt;$(document).trigger(&#8216;mouseup&#8217;);&lt;/code&gt;&#8221;.&lt;/p&gt;

&lt;p&gt;Here it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="s"&gt;tooltip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;draggable&lt;/span&gt;
  &lt;span class="nv"&gt;start: &lt;/span&gt;&lt;span class="nf"&gt;(e, ui) -&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="o"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nv"&gt;drag: &lt;/span&gt;&lt;span class="nf"&gt;(e, ui) -&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="o"&gt;is&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;ui.position.left = &lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left_old&lt;/span&gt;
      &lt;span class="nv"&gt;ui.position.top = &lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top_old&lt;/span&gt;

    &lt;span class="nv"&gt;ui.position.left_old = &lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;
    &lt;span class="nv"&gt;ui.position.top_old = &lt;/span&gt;&lt;span class="nx"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The drag event keeps the position of the element at its previous position and updates the &#8220;old position&#8221; to the same, effectively stopping movement.&lt;/p&gt;

&lt;p&gt;The start event is necessary for me because I want to kill the drag event immediately if the user clicks the code sample element. This prevents the behavior where someone highlights text and drags the cursor over the draggable &#8216;#tooltip&#8217; element, causing the tooltip to move.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Arrays and jQuery data attributes</title>
    <link href="/2011/09/15/Arrays-and-jQuery-data-attributes.html" rel="alternate"/>
    <id>/2011/09/15/Arrays-and-jQuery-data-attributes.html</id>
    <published>2011-09-15T00:00:00Z</published>
    <updated>2011-09-15T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;I recently had a situation where I wanted to use jQuery&#8217;s data method to convert one of my HTML data-attribute values into an array.&lt;/p&gt;

&lt;p&gt;I ran into trouble when I tried to use the returned data as an array. The problem was that my data-attribute wasn&#8217;t valid JSON because I had double quoted the attribute value instead of single quoting it. As a result, jQuery was parsing it as a string rather than an array.&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I recently had a situation where I wanted to use jQuery&#8217;s data method to convert one of my HTML data-attribute values into an array.&lt;/p&gt;

&lt;p&gt;I ran into trouble when I tried to use the returned data as an array. The problem was that my data-attribute wasn&#8217;t valid JSON because I had double quoted the attribute value instead of single quoting it. As a result, jQuery was parsing it as a string rather than an array.&lt;/p&gt;

&lt;p&gt;Here&#8217;s a demonstration of what was going on: &lt;a href="http://jsfiddle.net/EgbUh/6/"&gt;http://jsfiddle.net/EgbUh/6/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don&#8217;t let this happen to you. Make sure you are giving jQuery valid JSON to parse when you call the data method.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>OS X dock in css</title>
    <link href="/2011/03/17/OS-X-dock-in-css.html" rel="alternate"/>
    <id>/2011/03/17/OS-X-dock-in-css.html</id>
    <published>2011-03-17T00:00:00Z</published>
    <updated>2011-03-17T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">&lt;p&gt;As part of the &lt;a href="http://pixieengine.com"&gt;Pixie&lt;/a&gt; redesign, Daniel and I decided we wanted an &lt;a href="http://daringfireball.net/linked/2011/01/13/app-word-of-the-year"&gt;&#8220;App&#8221;&lt;/a&gt; dock as the primary site navigation. Without performing our design due diligence how could we expect to synergize the feel of the site and incentivize our community to shift the paradigm in our favor? #Monetize&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;As part of the &lt;a href="http://pixieengine.com"&gt;Pixie&lt;/a&gt; redesign, Daniel and I decided we wanted an &lt;a href="http://daringfireball.net/linked/2011/01/13/app-word-of-the-year"&gt;&#8220;App&#8221;&lt;/a&gt; dock as the primary site navigation. Without performing our design due diligence how could we expect to synergize the feel of the site and incentivize our community to shift the paradigm in our favor? #Monetize&lt;/p&gt;

&lt;p&gt;I looked around and found a good example of an OS X style dock in css by the folks at &lt;a href="http://www.zurb.com/playground/osx-dock"&gt;Zurb&lt;/a&gt;. I make no claims to the originality of my work. These guys deserve all the credit.&lt;/p&gt;

&lt;p&gt;The sample css was clear but once implemented on the site the height and z-index of the container elements got in the way of user interaction. The Zurb demo also used a scale and transition effect so that the icon would magnify on hover a la OS X but I thought it looked chunky and felt unresponsive.&lt;/p&gt;

&lt;p&gt;I have never liked that magnify feature on Macs and I had to resize the container height so I went ahead and cut out everything possible.&lt;/p&gt;

&lt;p&gt;There are two main tricks. The first is to know that &lt;code&gt;-webkit-box-reflect&lt;/code&gt; exists. The second is the following css:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nn"&gt;#dock-container&lt;/span&gt; &lt;span class="nc"&gt;.cap&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(images/dock_background.png)&lt;/span&gt; &lt;span class="no"&gt;bottom&lt;/span&gt; &lt;span class="no"&gt;left&lt;/span&gt; &lt;span class="no"&gt;no-repeat&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nn"&gt;#dock-container&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.osx-dock&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(images/dock_background.png)&lt;/span&gt; &lt;span class="no"&gt;no-repeat&lt;/span&gt; &lt;span class="no"&gt;right&lt;/span&gt; &lt;span class="no"&gt;bottom&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dock_background.png&lt;/code&gt; is a 1000 x 50 fancy transparent trapezoid. It would be a hassle if you had to create a new image every time you wanted to add an icon to your dock. The above css saves us from that. The first block sets the width of the image to 30px and positions it on the bottom left. The second block positions the same image on the bottom right and takes advantage of the bounding element to constrain its width. Then it uses &lt;code&gt;margin-left: 30px&lt;/code&gt; to line it up with the &lt;code&gt;width: 30px&lt;/code&gt; image to make the dock seamless. This trick will work until you approach the width of the image. So as long as you don&#8217;t have a dock that is over 1000px wide you don&#8217;t have to make new images.&lt;/p&gt;
</content>
  </entry>
</feed>
